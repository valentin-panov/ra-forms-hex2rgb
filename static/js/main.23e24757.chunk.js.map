{"version":3,"sources":["components/Converter/Converter.js","App.js","utils/hex2rgb.js","reportWebVitals.js","index.js"],"names":["Converter","handleSubmit","handleHexChange","form","prefix","className","onSubmit","type","id","name","value","hex","ref","target","focus","e","onChange","htmlFor","rgb","App","useState","setForm","style","backgroundColor","evt","preventDefault","rgbIn","textContent","prevForm","input","substr","length","rgbNum","validHEXInput","exec","outputObj","r","parseInt","g","b","hex2rgb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAoCeA,MAjCf,YAAqE,IAAhDC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACxD,OACE,qBAAKC,UAAU,YAAf,SACE,uBAAMC,SAAUL,EAAhB,UACE,uBACEI,UAAU,iBACVE,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,MAAOP,EAAKQ,IACZC,IAAK,SAACC,GACJ,IACEA,EAAOH,MAAQN,EACfS,EAAOC,QACP,MAAOC,MAEXC,SAAUd,IAEZ,uBAAOe,QAAQ,WAAWZ,UAAU,eAApC,SACGF,EAAKe,YC+BDC,MAhDf,WACE,MAAwBC,mBAAS,CAC/BT,IAAK,GACLO,IAAK,uBAFP,mBAAOf,EAAP,KAAakB,EAAb,KAKMjB,EAAS,IA2Bf,OACE,qBACEC,UAAU,MACViB,MAAO,CAAEC,gBAA8B,0CAAbpB,EAAKe,IAAoB,MAAQf,EAAKe,KAFlE,SAIE,cAAC,EAAD,CACEjB,aA/Be,SAACuB,GACpBA,EAAIC,iBACJ,IAAIC,EAAQF,EAAIX,OAAOc,YACvBN,GAAQ,SAACO,GAAD,mBAAC,eAAmBA,GAApB,IAA8BV,IAAKQ,QA6BvCxB,gBA1BkB,SAACsB,GACvB,IAAIK,EAAQL,EAAIX,OAAOH,MACI,MAAvBmB,EAAMC,OAAO,EAAG,KAClBD,EAAQA,EAAMC,OAAO,IAEnBD,EAAME,OAAS,IACjBF,EAAQA,EAAMC,OAAO,EAAG,IAE1BD,EAAQzB,EAASyB,EAAMC,OAAO1B,EAAO2B,QACrCV,GAAQ,SAACO,GAAD,mBAAC,eAAmBA,GAApB,IAA8BjB,IAAKkB,OAE3C,IAAIG,EC9BO,SAAiBrB,GAC9B,IAAIsB,EAAgB,4CAA4CC,KAAKvB,GACrE,IAAKsB,EACH,OAAO,EAET,IAAIE,EAAY,CACdC,EAAGC,SAASJ,EAAc,GAAI,IAC9BK,EAAGD,SAASJ,EAAc,GAAI,IAC9BM,EAAGF,SAASJ,EAAc,GAAI,KAGhC,MADU,UAAME,EAAUC,EAAhB,aAAsBD,EAAUG,EAAhC,aAAsCH,EAAUI,GDoB3CC,CAAQX,EAAMC,OAAO1B,EAAO2B,SAEvCV,EADEW,EACM,SAACJ,GAAD,mBAAC,eAAmBA,GAApB,IAA8BV,IAAI,OAAD,OAASc,EAAT,QAEjC,SAACJ,GAAD,mBAAC,eAAmBA,GAApB,IAA8BV,IAAK,6CAYzCf,KAAMA,EACNC,OAAQA,OEnCDqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.23e24757.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Converter({ handleSubmit, handleHexChange, form, prefix }) {\n  return (\n    <div className='Converter'>\n      <form onSubmit={handleSubmit}>\n        <input\n          className='ConverterInput'\n          type='text'\n          id='hexInput'\n          name='hexInput'\n          value={form.hex}\n          ref={(target) => {\n            try {\n              target.value = prefix;\n              target.focus();\n            } catch (e) {}\n          }}\n          onChange={handleHexChange}\n        />\n        <label htmlFor='hexInput' className='ConverterRGB'>\n          {form.rgb}\n        </label>\n      </form>\n    </div>\n  );\n}\n\nConverter.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleHexChange: PropTypes.func.isRequired,\n  form: PropTypes.object.isRequired,\n  prefix: PropTypes.string.isRequired,\n};\n\nexport default Converter;\n","import './App.css';\nimport React, { useState } from 'react';\nimport Converter from './components/Converter/Converter';\nimport hex2rgb from './utils/hex2rgb';\n\nfunction App() {\n  const [form, setForm] = useState({\n    hex: '',\n    rgb: 'rgb(255, 255, 255)',\n  });\n\n  const prefix = '#';\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    let rgbIn = evt.target.textContent;\n    setForm((prevForm) => ({ ...prevForm, rgb: rgbIn }));\n  };\n\n  const handleHexChange = (evt) => {\n    let input = evt.target.value;\n    if (input.substr(1, 1) === '#') {\n      input = input.substr(1);\n    }\n    if (input.length > 7) {\n      input = input.substr(0, 7);\n    }\n    input = prefix + input.substr(prefix.length);\n    setForm((prevForm) => ({ ...prevForm, hex: input }));\n\n    let rgbNum = hex2rgb(input.substr(prefix.length));\n    if (rgbNum) {\n      setForm((prevForm) => ({ ...prevForm, rgb: `rgb(${rgbNum})` }));\n    } else {\n      setForm((prevForm) => ({ ...prevForm, rgb: 'Ошибка!' }));\n    }\n  };\n\n  return (\n    <div\n      className='App'\n      style={{ backgroundColor: form.rgb === 'Ошибка!' ? 'red' : form.rgb }}\n    >\n      <Converter\n        handleSubmit={handleSubmit}\n        handleHexChange={handleHexChange}\n        form={form}\n        prefix={prefix}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","export default function hex2rgb(hex) {\n  let validHEXInput = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!validHEXInput) {\n    return false;\n  }\n  let outputObj = {\n    r: parseInt(validHEXInput[1], 16),\n    g: parseInt(validHEXInput[2], 16),\n    b: parseInt(validHEXInput[3], 16),\n  };\n  let output = `${outputObj.r}, ${outputObj.g}, ${outputObj.b}`;\n  return output;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}